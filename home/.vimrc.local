set term=xterm-256color
set wrap                      " visually wrap lines
set smartindent               " smart indenting
set shiftwidth=4              " default to two spaces
set tabstop=4                 " default to two spaces
set softtabstop=4             " default to two spaces
set shiftround                " always round indentation to shiftwidth
set mouse=                    " disable mouse
set expandtab

syntax enable
set termguicolors
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_italic=1
colorscheme gruvbox

" highlight ColorColumn ctermbg=gray
highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn="79,".join(range(120,999),",")
set cc=79
" disable Background Color Erase (BCE) according to:
" http://snk.tuxfamily.org/log/vim-256color-bce.html
set t_ut=

" setting markdown for md files
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

let g:indent_guides_enable_on_vim_startup = 0 " disable visible guides at indent points
let g:autoclose_vim_commentmode=1       " don't autoclose quotes in vim files
" let g:pymode_lint_checker="pep8,pylint" " pep8, then pylint. no pyflakes.
let g:pymode_lint_checkers = ['pyflakes', 'pycodestyle', 'pydocstyle', 'pylint']
let g:pymode_lint_on_write = 1
let g:pymode_folding = 0
let g:pymode_lint_cwindow = 1
let g:syntastic_python_python_exec = '/usr/bin/env python3'
let g:pymode_virtualenv = 1
" Override run current python file key shortcut to Ctrl-Shift-e
let g:pymode_run_bind = "<C-S-e>"
"<C-<F7>>"

" Override view python doc key shortcut to Ctrl-Shift-d
let g:pymode_doc_bind = "<C-S-d>"

let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number
let g:airline#extensions#tabline#show_tab_nr = 1

" unlet g:airline_left_sep
" unlet g:airline_right_sep

" Enable Python syntax highlight
let python_highlight_all = 1
let g:pymode_rope=1 " Don't need this right now.

" Setting some helpfull key-bindings for tabbing
"'Mapping ctrl+pgup and ctrl+pgdwn to change tabs inside vim
"" tab navigation like firefox
nnoremap <C-PageUp> :bprevious<CR>
nnoremap <C-PageDown> :bnext<CR>
nnoremap <C-t> :enew<CR>
inoremap <C-PageUp> <Esc>:bprevious<CR>i
inoremap <C-PageDown> <Esc>:bnext<CR>i
inoremap <C-t> <Esc>:enew<CR>

nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>1 :b1<CR>
nnoremap <leader>2 :b2<CR>
nnoremap <leader>3 :b3<CR>
nnoremap <leader>4 :b4<CR>
nnoremap <leader>5 :b5<CR>
nnoremap <leader>6 :b6<CR>
nnoremap <leader>7 :b7<CR>
nnoremap <leader>8 :b8<CR>
nnoremap <leader>9 :b9<CR>
nnoremap <leader>0 :b10<CR>

" https://github.com/christoomey/vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1

nnoremap <silent> <S-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <S-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <S-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <S-Right> :TmuxNavigateRight<cr>
nnoremap <silent> <S-\\> :TmuxNavigatePrevious<cr>

" Fast saving
nmap <leader>w :w!<cr>

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

" Disable spellcheck
let g:spellfile_URL = 'http://ftp.vim.org/vim/runtime/spell'
set spell spelllang=en_us,pt
"setlocal spell!
"set nospell

" Set indenting configs
autocmd FileType python setlocal sw=4 ts=4 sts=4 expandtab
autocmd FileType php setlocal sw=4 ts=4 sts=4 expandtab
autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype javascript setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype css setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype scss setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype sass setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype vue setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype yml setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype yaml setlocal ts=2 sw=2 sts=2 expandtab
autocmd Filetype cfg setlocal ts=2 sw=2 sts=2 expandtab

" Deoplete Plugin - not using it for now
" let g:deoplete#enable_at_startup = 1

" ctrlp
let g:ctrlp_regexp = 1
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](node_modules|cache)|(\.(git|hg|svn|vimviews|vimbackup|vimundo|viminfo|vimswap|sbt|ivy2|cache))$',
  \ 'file': '\v\.(exe|so|dll|sw|swp)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" Nerdcommenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Autopairs fix.
" There is a problem with Autopairs that it is remapping <M-b> to  in insert
" mode, thus making it impossible to write such character. This disables the
" mapping that causes this strange behavior.
let g:AutoPairsShortcutBackInsert=''


" Terraform
let g:terraform_align=1
let g:terraform_fold_sections=1
let g:terraform_fmt_on_save=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"
  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")
  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif
  let @/ = l:pattern
  let @" = l:saved_reg
endfunction
